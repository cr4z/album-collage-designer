[{"D:\\Dev\\React\\album-collage-designer\\src\\components\\GridContainer.tsx":"1","D:\\Dev\\React\\album-collage-designer\\src\\index.tsx":"2","D:\\Dev\\React\\album-collage-designer\\src\\functions\\itunes.ts":"3","D:\\Dev\\React\\album-collage-designer\\src\\themes\\modal.ts":"4","D:\\Dev\\React\\album-collage-designer\\src\\functions\\downloader.ts":"5","D:\\Dev\\React\\album-collage-designer\\src\\App.tsx":"6","D:\\Dev\\React\\album-collage-designer\\src\\functions\\getCanvas.ts":"7","D:\\Dev\\React\\album-collage-designer\\src\\functions\\waitForImages.ts":"8","D:\\Dev\\React\\album-collage-designer\\src\\functions\\setCssProps.ts":"9","D:\\Dev\\React\\album-collage-designer\\src\\reportWebVitals.ts":"10","D:\\Dev\\React\\album-collage-designer\\src\\themes\\global.ts":"11","D:\\Dev\\React\\album-collage-designer\\src\\contexts\\Modal.tsx":"12"},{"size":7174,"mtime":1606951438925,"results":"13","hashOfConfig":"14"},{"size":500,"mtime":1604855011384,"results":"15","hashOfConfig":"14"},{"size":761,"mtime":1606944730390,"results":"16","hashOfConfig":"14"},{"size":270,"mtime":1606847110484,"results":"17","hashOfConfig":"14"},{"size":245,"mtime":1606857236726,"results":"18","hashOfConfig":"14"},{"size":632,"mtime":1606946779565,"results":"19","hashOfConfig":"14"},{"size":496,"mtime":1606943991559,"results":"20","hashOfConfig":"14"},{"size":674,"mtime":1606857265941,"results":"21","hashOfConfig":"14"},{"size":307,"mtime":1606945351317,"results":"22","hashOfConfig":"14"},{"size":426,"mtime":1604855011384,"results":"23","hashOfConfig":"14"},{"size":500,"mtime":1606008270101,"results":"24","hashOfConfig":"14"},{"size":7277,"mtime":1606948598661,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28","usedDeprecatedRules":"29"},"8ikixd",{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"29"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"29"},"D:\\Dev\\React\\album-collage-designer\\src\\components\\GridContainer.tsx",["55","56"],"import React, {\r\n  useCallback,\r\n  useContext,\r\n  useEffect,\r\n  useRef,\r\n  useState,\r\n} from \"react\";\r\nimport { ModalContext } from \"../contexts/Modal\";\r\nimport { Button, CircularProgress, TextField } from \"@material-ui/core\";\r\n\r\nimport { setCssProps } from \"../functions/setCssProps\";\r\nimport { waitForImagesToLoad } from \"../functions/waitForImages\";\r\nimport { getCanvas } from \"../functions/getCanvas\";\r\nimport { downloadImageFromURL } from \"../functions/downloader\";\r\n\r\nexport function GridContainer() {\r\n  const ctx = useContext(ModalContext);\r\n  if (!ctx) throw new Error(\"Context not received!\");\r\n\r\n  const _defaultCols = 4;\r\n  const _defaultRows = 8;\r\n\r\n  const [inputNumColumns, setInputNumColumns] = useState<number>(_defaultCols);\r\n  const [inputNumRows, setInputNumRows] = useState<number>(_defaultRows);\r\n  const [officialNumColumns, setOfficialNumColumns] = useState<number>(\r\n    _defaultCols\r\n  );\r\n  const [officialNumRows, setOfficialNumRows] = useState<number>(_defaultRows);\r\n\r\n  const [gridIsLoading, setGridIsLoading] = useState<boolean>(false);\r\n  const [downloadInProgress, setDownloadInProgress] = useState<boolean>(false);\r\n\r\n  const [officialImages, setOfficialImages] = useState<HTMLImageElement[]>([]);\r\n  const officialImagesRef = useRef<HTMLImageElement[]>();\r\n  officialImagesRef.current = officialImages;\r\n\r\n  const onGridInitialized = useCallback((initialImages: HTMLImageElement[]) => {\r\n    setOfficialImages([...initialImages]);\r\n  }, []);\r\n\r\n  const onItemSet = useCallback((index: number, newSrc: string) => {\r\n    const old = officialImagesRef.current;\r\n\r\n    if (old) {\r\n      const newImages = [...old];\r\n      newImages[index].src = newSrc;\r\n\r\n      //set the official image\r\n      setOfficialImages(newImages);\r\n    } else throw new Error(\"Ref was not assigned!\");\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      <div className=\"grid-text-field-container\">\r\n        <div className=\"input-fields-container\">\r\n          <div className=\"text-field\">\r\n            <TextField\r\n              label=\"Columns\"\r\n              defaultValue={_defaultCols}\r\n              variant=\"outlined\"\r\n              onChange={(e) => setInputNumColumns(+e.target.value)}\r\n            />\r\n          </div>\r\n          <div className=\"text-field\">\r\n            <TextField\r\n              label=\"Rows\"\r\n              defaultValue={_defaultRows}\r\n              variant=\"outlined\"\r\n              onChange={(e) => setInputNumRows(+e.target.value)}\r\n            />\r\n          </div>\r\n        </div>\r\n        <div>\r\n          <Button\r\n            disabled={gridIsLoading || downloadInProgress}\r\n            size=\"large\"\r\n            onClick={() => {\r\n              const allowed = window.confirm(\r\n                \"This will reset your current images! Continue?\"\r\n              );\r\n              if (!allowed) return;\r\n              if (inputNumColumns * inputNumRows < 500) {\r\n                setOfficialNumColumns(inputNumColumns);\r\n                setOfficialNumRows(inputNumRows);\r\n              } else\r\n                alert(\r\n                  \"Slow your roll Picasso! We can't go over 500 total cells!\"\r\n                );\r\n            }}\r\n          >\r\n            Set!\r\n          </Button>\r\n        </div>\r\n      </div>\r\n\r\n      <Grid\r\n        onGridInitialized={onGridInitialized}\r\n        gridValues={{\r\n          numColumns: officialNumColumns,\r\n          numRows: officialNumRows,\r\n        }}\r\n        gridState={{ gridIsLoading, setGridIsLoading }}\r\n        onItemSet={(index: number, newSrc: string) => onItemSet(index, newSrc)}\r\n      />\r\n\r\n      <br />\r\n      <div className=\"download-container\">\r\n        <div>\r\n          <Button\r\n            color=\"primary\"\r\n            size=\"large\"\r\n            disabled={gridIsLoading || downloadInProgress}\r\n            onClick={() => {\r\n              onDownloadButtonDown(\r\n                officialImages,\r\n                {\r\n                  numColumns: inputNumColumns,\r\n                  numRows: inputNumRows,\r\n                },\r\n                setDownloadInProgress\r\n              );\r\n            }}\r\n          >\r\n            Download!\r\n          </Button>\r\n        </div>\r\n\r\n        <div className=\"download-progress-spinner\">\r\n          {downloadInProgress && <CircularProgress />}\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nconst onDownloadButtonDown = async (\r\n  images: HTMLImageElement[],\r\n  gridValues: { numColumns: number; numRows: number },\r\n  setDownloadInProgress: Function\r\n) => {\r\n  setDownloadInProgress(true);\r\n\r\n  const imageSources: string[] = images.map((img) => {\r\n    return img.src;\r\n  });\r\n\r\n  const url = await getCanvas(gridValues, imageSources);\r\n  console.log(url.length);\r\n\r\n  downloadImageFromURL(url);\r\n\r\n  setDownloadInProgress(false);\r\n};\r\n\r\nconst Grid = (props: {\r\n  gridValues: { numColumns: number; numRows: number };\r\n  gridState: { gridIsLoading: any; setGridIsLoading: Function };\r\n  onGridInitialized: Function;\r\n  onItemSet: Function;\r\n}) => {\r\n  const { gridState } = props;\r\n  const { numColumns, numRows } = props.gridValues;\r\n  const total = numColumns * numRows;\r\n\r\n  const [cellItems, setCellItems] = useState<JSX.Element[]>([]);\r\n\r\n  useEffect(() => {\r\n    //initialize grid; generate and assign CellItems\r\n\r\n    gridState.setGridIsLoading(true);\r\n\r\n    //generate new array of images\r\n    const newImages: HTMLImageElement[] = [];\r\n    for (let i = 0; i < total; i++) {\r\n      const newImg = new Image();\r\n      newImg.src = `https://picsum.photos/seed/${Math.random()}/1000`;\r\n      newImages.push(newImg);\r\n    }\r\n\r\n    //init css\r\n    setCssProps({ numColumns: numColumns, numRows: numRows });\r\n\r\n    //wait for image array to load\r\n    waitForImagesToLoad(newImages).then(() => {\r\n      //generate new array of cellitems\r\n\r\n      const newCellItems: JSX.Element[] = [];\r\n      let i: number = -1;\r\n\r\n      newImages.forEach((image) => {\r\n        i++;\r\n\r\n        const newItem = (\r\n          <CellItem\r\n            initialSource={image.src}\r\n            index={i}\r\n            onItemSet={(index: number, newSrc: string) =>\r\n              props.onItemSet(index, newSrc)\r\n            }\r\n          />\r\n        );\r\n\r\n        newCellItems.push(newItem);\r\n      });\r\n\r\n      setCellItems(newCellItems);\r\n\r\n      //finally, set grid state to not loading\r\n      props.onGridInitialized(newImages);\r\n      gridState.setGridIsLoading(false);\r\n    });\r\n  }, [numColumns, numRows]);\r\n\r\n  return gridState.gridIsLoading ? (\r\n    <CircularProgress color=\"secondary\" style={{ margin: 100 }} />\r\n  ) : (\r\n    <div className=\"grid\">{cellItems}</div>\r\n  );\r\n};\r\n\r\nfunction CellItem(props: {\r\n  initialSource: string;\r\n  index: number;\r\n  onItemSet: Function;\r\n}) {\r\n  const context = useContext(ModalContext);\r\n\r\n  const [src, setSrc] = useState<string>(props.initialSource);\r\n\r\n  const onImageReceieved = useCallback((newSource: string) => {\r\n    setSrc(newSource);\r\n    props.onItemSet(props.index, newSource);\r\n  }, []);\r\n\r\n  return (\r\n    <img\r\n      className=\"cell-item\"\r\n      src={src}\r\n      alt=\"album cover\"\r\n      onClick={() => {\r\n        if (context) {\r\n          context.openModal(() => onImageReceieved);\r\n        }\r\n      }}\r\n    ></img>\r\n  );\r\n}\r\n",["57","58"],"D:\\Dev\\React\\album-collage-designer\\src\\index.tsx",[],"D:\\Dev\\React\\album-collage-designer\\src\\functions\\itunes.ts",["59"],"import { error } from \"console\";\r\n\r\nexport const getImagesFromInput = async (input: string, callback: Function) => {\r\n  const encodedInput = encodeURIComponent(input).replace(/%20/g, \"+\");\r\n\r\n  const encodedReq = encodeURIComponent(\r\n    `https://itunes.apple.com/search?term=${encodedInput}&entity=album&media=music`\r\n  );\r\n\r\n  const response = await fetch(`/proxy/${encodedReq}`, {\r\n    method: \"GET\",\r\n  });\r\n\r\n  const json = await response.json();\r\n\r\n  const results = json.results;\r\n\r\n  const sources: string[] = [];\r\n\r\n  results.forEach((result: any) => {\r\n    let imgSrc: string = result.artworkUrl100;\r\n\r\n    imgSrc = imgSrc.replace(/100x100/g, \"200x200\");\r\n\r\n    if (!sources.includes(imgSrc)) sources.push(imgSrc);\r\n  });\r\n\r\n  callback(sources);\r\n};\r\n","D:\\Dev\\React\\album-collage-designer\\src\\themes\\modal.ts",[],"D:\\Dev\\React\\album-collage-designer\\src\\functions\\downloader.ts",[],["60","61"],"D:\\Dev\\React\\album-collage-designer\\src\\App.tsx",[],"D:\\Dev\\React\\album-collage-designer\\src\\functions\\getCanvas.ts",[],"D:\\Dev\\React\\album-collage-designer\\src\\functions\\waitForImages.ts",[],"D:\\Dev\\React\\album-collage-designer\\src\\functions\\setCssProps.ts",[],"D:\\Dev\\React\\album-collage-designer\\src\\reportWebVitals.ts",[],"D:\\Dev\\React\\album-collage-designer\\src\\themes\\global.ts",[],"D:\\Dev\\React\\album-collage-designer\\src\\contexts\\Modal.tsx",["62","63"],"import React, {\r\n  createContext,\r\n  useCallback,\r\n  useRef,\r\n  useState,\r\n} from \"react\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faTimes } from \"@fortawesome/free-solid-svg-icons\";\r\nimport {\r\n  Button,\r\n  CircularProgress,\r\n  TextField,\r\n  ThemeProvider,\r\n} from \"@material-ui/core\";\r\nimport { ModalTheme } from \"../themes/modal\";\r\nimport * as iTunes from \"../functions/itunes\";\r\n\r\ninterface IModalContext {\r\n  openModal: Function;\r\n}\r\n\r\ninterface ITagObject {\r\n  elem: JSX.Element;\r\n  label: string;\r\n}\r\n\r\nexport const ModalContext = createContext<IModalContext | null>(null);\r\n\r\nconst ModalContextProvider = (props: any) => {\r\n  const [modalOpen, setModalOpen] = useState<boolean>(false);\r\n  const [input, setInput] = useState<string>(\"\");\r\n  const [gridCallback, setGridCallback] = useState<Function | null>(null);\r\n  const [loadingResults, setLoadingResults] = useState<boolean>(false);\r\n  const [sources, setSources] = useState<string[]>([]);\r\n  const [welcomeMessage, setWelcomeMessage] = useState<string>(\"\");\r\n  const [tagObjects, setTagObjects] = useState<ITagObject[]>([]);\r\n  const tagObjectsRef = useRef(tagObjects);\r\n  tagObjectsRef.current = tagObjects;\r\n\r\n  const onImagesReturned = useCallback((results: string[]) => {\r\n    setSources(results);\r\n    setLoadingResults(false);\r\n  }, []);\r\n\r\n  const submitBtnRef = useRef<HTMLButtonElement | null>(null);\r\n\r\n  const ctx = {\r\n    openModal: (inputCallback: Function) => {\r\n      setModalOpen(true);\r\n      setGridCallback((x: string) => inputCallback(x));\r\n    },\r\n  };\r\n\r\n  const onImageSelected = useCallback(\r\n    (src: string) => {\r\n      if (gridCallback) {\r\n        gridCallback(src);\r\n        setModalOpen(false);\r\n      } else {\r\n        throw new Error(\"Callback doesn't exist!\");\r\n      }\r\n    },\r\n    [gridCallback]\r\n  );\r\n\r\n  const [pageInView, setPageInView] = useState<number>(0);\r\n  const resultsPerPage = 6;\r\n  const offset = pageInView * resultsPerPage;\r\n  const results: JSX.Element[] = [];\r\n  for (let i = 0; i < resultsPerPage; i++) {\r\n    if (sources[i + offset]) {\r\n      results.push(\r\n        <Result src={sources[i + offset]} onImageSelected={onImageSelected} />\r\n      );\r\n    }\r\n  }\r\n\r\n  const prevPage = useCallback(() => {\r\n    setPageInView(pageInView - 1);\r\n  }, [pageInView]);\r\n\r\n  const nextPage = useCallback(() => {\r\n    setPageInView(pageInView + 1);\r\n  }, [pageInView]);\r\n\r\n  const addTag = useCallback((input: string) => {\r\n    let labels = tagObjectsRef.current.map((a) => a.label);\r\n\r\n    if (labels.includes(input)) return;\r\n    if (tagObjectsRef.current.length > 4) return;\r\n    if (input.length > 30) return;\r\n\r\n    const newElem = (\r\n      <Tag\r\n        label={input}\r\n        onTagSearch={(label: string) => onTagSearch(label)}\r\n        onTagDelete={(label: string) => onTagDelete(label)}\r\n      />\r\n    );\r\n\r\n    const newTag = { elem: newElem, label: input };\r\n    setTagObjects((old: any) => [...old, newTag]);\r\n  }, []);\r\n\r\n  const onTagSearch = useCallback((label: string) => {\r\n    iTunes.getImagesFromInput(label, onImagesReturned);\r\n    setPageInView(0);\r\n  }, []);\r\n\r\n  const onTagDelete = useCallback((label: string) => {\r\n    const filtered: ITagObject[] = tagObjectsRef.current.filter(\r\n      (tag) => label !== tag.label\r\n    );\r\n    setTagObjects(filtered);\r\n  }, []);\r\n\r\n  return (\r\n    <ModalContext.Provider value={{ ...ctx }}>\r\n      {modalOpen && (\r\n        <ThemeProvider theme={ModalTheme}>\r\n          <div className=\"modal-backdrop\">\r\n            <div className=\"modal-holder\">\r\n              <div className=\"modal\">\r\n                <div className=\"modal-header\">\r\n                  Add an album\r\n                  <FontAwesomeIcon\r\n                    className=\"modal-ex-btn\"\r\n                    onClick={() => setModalOpen(false)}\r\n                    icon={faTimes}\r\n                  />\r\n                </div>\r\n                <div className=\"modal-divider\" />\r\n\r\n                <div className=\"modal-search-bar\">\r\n                  <TextField\r\n                    fullWidth\r\n                    placeholder=\"Search for an artist or album...\"\r\n                    variant=\"outlined\"\r\n                    size=\"small\"\r\n                    onChange={(e) => setInput(e.target.value)}\r\n                    onKeyDown={(e) => {\r\n                      if (e.key === \"Enter\") {\r\n                        const btn = submitBtnRef.current;\r\n                        if (btn) {\r\n                          btn.click();\r\n                        } else throw new Error(\"Submit button doesn't exist!\");\r\n                      }\r\n                    }}\r\n                  />\r\n                </div>\r\n\r\n                <div className=\"tags-container\">\r\n                  {tagObjects.map((obj) => obj.elem)}\r\n                </div>\r\n\r\n                {sources.length > 0 ? (\r\n                  <div className=\"modal-grid\">{results}</div>\r\n                ) : loadingResults ? (\r\n                  <CircularProgress />\r\n                ) : (\r\n                  <span>{welcomeMessage}</span>\r\n                )}\r\n\r\n                <div className=\"modal-button-container\">\r\n                  <div>\r\n                    <Button disabled={pageInView < 1} onClick={prevPage}>\r\n                      👈\r\n                    </Button>\r\n                  </div>\r\n                  <div>\r\n                    <Button\r\n                      disabled={results.length < resultsPerPage}\r\n                      onClick={nextPage}\r\n                    >\r\n                      👉\r\n                    </Button>\r\n                  </div>\r\n                </div>\r\n\r\n                <div className=\"modal-divider\" />\r\n                <div className=\"modal-footer\">\r\n                  <Button\r\n                    variant=\"contained\"\r\n                    color=\"primary\"\r\n                    disableElevation={true}\r\n                    ref={submitBtnRef}\r\n                    onClick={async () => {\r\n                      addTag(input);\r\n                      setSources([]);\r\n                      setWelcomeMessage(\"Hm, nothing found :(\");\r\n                      setLoadingResults(true);\r\n                      iTunes.getImagesFromInput(input, onImagesReturned);\r\n                      setPageInView(0);\r\n                    }}\r\n                  >\r\n                    Search\r\n                  </Button>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </ThemeProvider>\r\n      )}\r\n      {props.children}\r\n    </ModalContext.Provider>\r\n  );\r\n};\r\n\r\nfunction Tag(props: {\r\n  label: string;\r\n  onTagSearch: Function;\r\n  onTagDelete: Function;\r\n}) {\r\n  const { label, onTagSearch, onTagDelete } = props;\r\n\r\n  return (\r\n    <span className=\"tag\">\r\n      <span className=\"tag-text\" onClick={() => onTagSearch(label)}>\r\n        {label}{\" \"}\r\n      </span>\r\n      <span onClick={() => onTagDelete(label)}>❌</span>\r\n    </span>\r\n  );\r\n}\r\n\r\nfunction Result(props: { src: string; onImageSelected: Function }) {\r\n  return (\r\n    <div className=\"modal-grid-result\">\r\n      <img\r\n        onClick={() => props.onImageSelected(props.src)}\r\n        width={200}\r\n        height={200}\r\n        src={props.src}\r\n        alt=\"result\"\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ModalContextProvider;\r\n",{"ruleId":"64","severity":1,"message":"65","line":213,"column":6,"nodeType":"66","endLine":213,"endColumn":27,"suggestions":"67"},{"ruleId":"64","severity":1,"message":"68","line":234,"column":6,"nodeType":"66","endLine":234,"endColumn":8,"suggestions":"69"},{"ruleId":"70","replacedBy":"71"},{"ruleId":"72","replacedBy":"73"},{"ruleId":"74","severity":1,"message":"75","line":1,"column":10,"nodeType":"76","messageId":"77","endLine":1,"endColumn":15},{"ruleId":"70","replacedBy":"78"},{"ruleId":"72","replacedBy":"79"},{"ruleId":"64","severity":1,"message":"80","line":103,"column":6,"nodeType":"66","endLine":103,"endColumn":8,"suggestions":"81"},{"ruleId":"64","severity":1,"message":"82","line":108,"column":6,"nodeType":"66","endLine":108,"endColumn":8,"suggestions":"83"},"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'gridState', 'props', and 'total'. Either include them or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.","ArrayExpression",["84"],"React Hook useCallback has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useCallback call and refer to those specific props inside useCallback.",["85"],"no-native-reassign",["86"],"no-negated-in-lhs",["87"],"@typescript-eslint/no-unused-vars","'error' is defined but never used.","Identifier","unusedVar",["86"],["87"],"React Hook useCallback has missing dependencies: 'onTagDelete' and 'onTagSearch'. Either include them or remove the dependency array.",["88"],"React Hook useCallback has a missing dependency: 'onImagesReturned'. Either include it or remove the dependency array.",["89"],{"desc":"90","fix":"91"},{"desc":"92","fix":"93"},"no-global-assign","no-unsafe-negation",{"desc":"94","fix":"95"},{"desc":"96","fix":"97"},"Update the dependencies array to be: [gridState, numColumns, numRows, props, total]",{"range":"98","text":"99"},"Update the dependencies array to be: [props]",{"range":"100","text":"101"},"Update the dependencies array to be: [onTagDelete, onTagSearch]",{"range":"102","text":"103"},"Update the dependencies array to be: [onImagesReturned]",{"range":"104","text":"105"},[6374,6395],"[gridState, numColumns, numRows, props, total]",[6928,6930],"[props]",[2967,2969],"[onTagDelete, onTagSearch]",[3116,3118],"[onImagesReturned]"]