[{"D:\\Dev\\React\\album-collage-designer\\src\\components\\GridContainer.tsx":"1","D:\\Dev\\React\\album-collage-designer\\src\\index.tsx":"2","D:\\Dev\\React\\album-collage-designer\\src\\functions\\itunes.ts":"3","D:\\Dev\\React\\album-collage-designer\\src\\themes\\modal.ts":"4","D:\\Dev\\React\\album-collage-designer\\src\\functions\\downloader.ts":"5","D:\\Dev\\React\\album-collage-designer\\src\\App.tsx":"6","D:\\Dev\\React\\album-collage-designer\\src\\functions\\getCanvas.ts":"7","D:\\Dev\\React\\album-collage-designer\\src\\functions\\waitForImages.ts":"8","D:\\Dev\\React\\album-collage-designer\\src\\functions\\setCssProps.ts":"9","D:\\Dev\\React\\album-collage-designer\\src\\reportWebVitals.ts":"10","D:\\Dev\\React\\album-collage-designer\\src\\themes\\global.ts":"11","D:\\Dev\\React\\album-collage-designer\\src\\contexts\\Modal.tsx":"12"},{"size":6877,"mtime":1606930574397,"results":"13","hashOfConfig":"14"},{"size":500,"mtime":1604855011384,"results":"15","hashOfConfig":"14"},{"size":656,"mtime":1606847110484,"results":"16","hashOfConfig":"14"},{"size":270,"mtime":1606847110484,"results":"17","hashOfConfig":"14"},{"size":245,"mtime":1606857236726,"results":"18","hashOfConfig":"14"},{"size":631,"mtime":1606856795683,"results":"19","hashOfConfig":"14"},{"size":496,"mtime":1606930526148,"results":"20","hashOfConfig":"14"},{"size":674,"mtime":1606857265941,"results":"21","hashOfConfig":"14"},{"size":307,"mtime":1606856495580,"results":"22","hashOfConfig":"14"},{"size":426,"mtime":1604855011384,"results":"23","hashOfConfig":"14"},{"size":500,"mtime":1606008270101,"results":"24","hashOfConfig":"14"},{"size":7278,"mtime":1606847110483,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"8ikixd",{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"30"},"D:\\Dev\\React\\album-collage-designer\\src\\components\\GridContainer.tsx",["52","53"],"D:\\Dev\\React\\album-collage-designer\\src\\index.tsx",[],["54","55"],"D:\\Dev\\React\\album-collage-designer\\src\\functions\\itunes.ts",[],"D:\\Dev\\React\\album-collage-designer\\src\\themes\\modal.ts",[],"D:\\Dev\\React\\album-collage-designer\\src\\functions\\downloader.ts",[],"D:\\Dev\\React\\album-collage-designer\\src\\App.tsx",[],"D:\\Dev\\React\\album-collage-designer\\src\\functions\\getCanvas.ts",[],"D:\\Dev\\React\\album-collage-designer\\src\\functions\\waitForImages.ts",[],"D:\\Dev\\React\\album-collage-designer\\src\\functions\\setCssProps.ts",[],"D:\\Dev\\React\\album-collage-designer\\src\\reportWebVitals.ts",[],"D:\\Dev\\React\\album-collage-designer\\src\\themes\\global.ts",[],"D:\\Dev\\React\\album-collage-designer\\src\\contexts\\Modal.tsx",["56","57"],"import React, {\r\n  createContext,\r\n  useCallback,\r\n  useRef,\r\n  useState,\r\n} from \"react\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faTimes } from \"@fortawesome/free-solid-svg-icons\";\r\nimport {\r\n  Button,\r\n  CircularProgress,\r\n  TextField,\r\n  ThemeProvider,\r\n} from \"@material-ui/core\";\r\nimport { ModalTheme } from \"../themes/modal\";\r\nimport * as iTunes from \"../functions/itunes\";\r\n\r\ninterface IModalContext {\r\n  openModal: Function;\r\n}\r\n\r\ninterface ITagObject {\r\n  elem: JSX.Element;\r\n  label: string;\r\n}\r\n\r\nexport const ModalContext = createContext<IModalContext | null>(null);\r\n\r\nconst ModalContextProvider = (props: any) => {\r\n  const [modalOpen, setModalOpen] = useState<boolean>(false);\r\n  const [input, setInput] = useState<string>(\"\");\r\n  const [gridCallback, setGridCallback] = useState<Function | null>(null);\r\n  const [loadingResults, setLoadingResults] = useState<boolean>(false);\r\n  const [sources, setSources] = useState<string[]>([]);\r\n  const [welcomeMessage, setWelcomeMessage] = useState<string>(\"\");\r\n  const [tagObjects, setTagObjects] = useState<ITagObject[]>([]);\r\n  const tagObjectsRef = useRef(tagObjects);\r\n  tagObjectsRef.current = tagObjects;\r\n\r\n  const onImagesReturned = useCallback((results: string[]) => {\r\n    setSources(results);\r\n    setLoadingResults(false);\r\n  }, []);\r\n\r\n  const submitBtnRef = useRef<HTMLButtonElement | null>(null);\r\n\r\n  const ctx = {\r\n    openModal: (inputCallback: Function) => {\r\n      setModalOpen(true);\r\n      setGridCallback((x: string) => inputCallback(x));\r\n    },\r\n  };\r\n\r\n  const onImageSelected = useCallback(\r\n    (src: string) => {\r\n      if (gridCallback) {\r\n        gridCallback(src);\r\n        setModalOpen(false);\r\n      } else {\r\n        throw new Error(\"Callback doesn't exist!\");\r\n      }\r\n    },\r\n    [gridCallback]\r\n  );\r\n\r\n  const [pageInView, setPageInView] = useState<number>(0);\r\n  const resultsPerPage = 6;\r\n  const offset = pageInView * resultsPerPage;\r\n  const results: JSX.Element[] = [];\r\n  for (let i = 0; i < resultsPerPage; i++) {\r\n    if (sources[i + offset]) {\r\n      results.push(\r\n        <Result src={sources[i + offset]} onImageSelected={onImageSelected} />\r\n      );\r\n    }\r\n  }\r\n\r\n  const prevPage = useCallback(() => {\r\n    setPageInView(pageInView - 1);\r\n  }, [pageInView]);\r\n\r\n  const nextPage = useCallback(() => {\r\n    setPageInView(pageInView + 1);\r\n  }, [pageInView]);\r\n\r\n  const addTag = useCallback((input: string) => {\r\n    let labels = tagObjectsRef.current.map((a) => a.label);\r\n\r\n    if (labels.includes(input)) return;\r\n    if (tagObjectsRef.current.length > 15) return;\r\n    if (input.length > 30) return;\r\n\r\n    const newElem = (\r\n      <Tag\r\n        label={input}\r\n        onTagSearch={(label: string) => onTagSearch(label)}\r\n        onTagDelete={(label: string) => onTagDelete(label)}\r\n      />\r\n    );\r\n\r\n    const newTag = { elem: newElem, label: input };\r\n    setTagObjects((old: any) => [...old, newTag]);\r\n  }, []);\r\n\r\n  const onTagSearch = useCallback((label: string) => {\r\n    iTunes.getImagesFromInput(label, onImagesReturned);\r\n    setPageInView(0);\r\n  }, []);\r\n\r\n  const onTagDelete = useCallback((label: string) => {\r\n    const filtered: ITagObject[] = tagObjectsRef.current.filter(\r\n      (tag) => label !== tag.label\r\n    );\r\n    setTagObjects(filtered);\r\n  }, []);\r\n\r\n  return (\r\n    <ModalContext.Provider value={{ ...ctx }}>\r\n      {modalOpen && (\r\n        <ThemeProvider theme={ModalTheme}>\r\n          <div className=\"modal-backdrop\">\r\n            <div className=\"modal-holder\">\r\n              <div className=\"modal\">\r\n                <div className=\"modal-header\">\r\n                  Add an album\r\n                  <FontAwesomeIcon\r\n                    className=\"modal-ex-btn\"\r\n                    onClick={() => setModalOpen(false)}\r\n                    icon={faTimes}\r\n                  />\r\n                </div>\r\n                <div className=\"modal-divider\" />\r\n\r\n                <div className=\"modal-search-bar\">\r\n                  <TextField\r\n                    fullWidth\r\n                    placeholder=\"Search for an artist or album...\"\r\n                    variant=\"outlined\"\r\n                    size=\"small\"\r\n                    onChange={(e) => setInput(e.target.value)}\r\n                    onKeyDown={(e) => {\r\n                      if (e.key === \"Enter\") {\r\n                        const btn = submitBtnRef.current;\r\n                        if (btn) {\r\n                          btn.click();\r\n                        } else throw new Error(\"Submit button doesn't exist!\");\r\n                      }\r\n                    }}\r\n                  />\r\n                </div>\r\n\r\n                <div className=\"tags-container\">\r\n                  {tagObjects.map((obj) => obj.elem)}\r\n                </div>\r\n\r\n                {sources.length > 0 ? (\r\n                  <div className=\"modal-grid\">{results}</div>\r\n                ) : loadingResults ? (\r\n                  <CircularProgress />\r\n                ) : (\r\n                  <span>{welcomeMessage}</span>\r\n                )}\r\n\r\n                <div className=\"modal-button-container\">\r\n                  <div>\r\n                    <Button disabled={pageInView < 1} onClick={prevPage}>\r\n                      👈\r\n                    </Button>\r\n                  </div>\r\n                  <div>\r\n                    <Button\r\n                      disabled={results.length < resultsPerPage}\r\n                      onClick={nextPage}\r\n                    >\r\n                      👉\r\n                    </Button>\r\n                  </div>\r\n                </div>\r\n\r\n                <div className=\"modal-divider\" />\r\n                <div className=\"modal-footer\">\r\n                  <Button\r\n                    variant=\"contained\"\r\n                    color=\"primary\"\r\n                    disableElevation={true}\r\n                    ref={submitBtnRef}\r\n                    onClick={async () => {\r\n                      addTag(input);\r\n                      setSources([]);\r\n                      setWelcomeMessage(\"Hm, nothing found :(\");\r\n                      setLoadingResults(true);\r\n                      iTunes.getImagesFromInput(input, onImagesReturned);\r\n                      setPageInView(0);\r\n                    }}\r\n                  >\r\n                    Search\r\n                  </Button>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </ThemeProvider>\r\n      )}\r\n      {props.children}\r\n    </ModalContext.Provider>\r\n  );\r\n};\r\n\r\nfunction Tag(props: {\r\n  label: string;\r\n  onTagSearch: Function;\r\n  onTagDelete: Function;\r\n}) {\r\n  const { label, onTagSearch, onTagDelete } = props;\r\n\r\n  return (\r\n    <span className=\"tag\">\r\n      <span className=\"tag-text\" onClick={() => onTagSearch(label)}>\r\n        {label}{\" \"}\r\n      </span>\r\n      <span onClick={() => onTagDelete(label)}>❌</span>\r\n    </span>\r\n  );\r\n}\r\n\r\nfunction Result(props: { src: string; onImageSelected: Function }) {\r\n  return (\r\n    <div className=\"modal-grid-result\">\r\n      <img\r\n        onClick={() => props.onImageSelected(props.src)}\r\n        width={200}\r\n        height={200}\r\n        src={props.src}\r\n        alt=\"result\"\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ModalContextProvider;\r\n",{"ruleId":"58","severity":1,"message":"59","line":204,"column":6,"nodeType":"60","endLine":204,"endColumn":27,"suggestions":"61"},{"ruleId":"58","severity":1,"message":"62","line":225,"column":6,"nodeType":"60","endLine":225,"endColumn":8,"suggestions":"63"},{"ruleId":"64","replacedBy":"65"},{"ruleId":"66","replacedBy":"67"},{"ruleId":"58","severity":1,"message":"68","line":103,"column":6,"nodeType":"60","endLine":103,"endColumn":8,"suggestions":"69"},{"ruleId":"58","severity":1,"message":"70","line":108,"column":6,"nodeType":"60","endLine":108,"endColumn":8,"suggestions":"71"},"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'gridState', 'props', and 'total'. Either include them or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.","ArrayExpression",["72"],"React Hook useCallback has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useCallback call and refer to those specific props inside useCallback.",["73"],"no-native-reassign",["74"],"no-negated-in-lhs",["75"],"React Hook useCallback has missing dependencies: 'onTagDelete' and 'onTagSearch'. Either include them or remove the dependency array.",["76"],"React Hook useCallback has a missing dependency: 'onImagesReturned'. Either include it or remove the dependency array.",["77"],{"desc":"78","fix":"79"},{"desc":"80","fix":"81"},"no-global-assign","no-unsafe-negation",{"desc":"82","fix":"83"},{"desc":"84","fix":"85"},"Update the dependencies array to be: [gridState, numColumns, numRows, props, total]",{"range":"86","text":"87"},"Update the dependencies array to be: [props]",{"range":"88","text":"89"},"Update the dependencies array to be: [onTagDelete, onTagSearch]",{"range":"90","text":"91"},"Update the dependencies array to be: [onImagesReturned]",{"range":"92","text":"93"},[6077,6098],"[gridState, numColumns, numRows, props, total]",[6631,6633],"[props]",[2968,2970],"[onTagDelete, onTagSearch]",[3117,3119],"[onImagesReturned]"]