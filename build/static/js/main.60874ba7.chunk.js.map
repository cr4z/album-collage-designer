{"version":3,"sources":["themes/modal.ts","functions/itunes.ts","contexts/Modal.tsx","themes/global.ts","functions/waitForImages.ts","functions/getCanvas.ts","functions/downloader.ts","components/GridContainer.tsx","functions/setCssProps.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["ModalTheme","createMuiTheme","palette","type","props","MuiButton","variant","disableElevation","size","getImagesFromInput","input","callback","a","encodedInput","encodeURIComponent","replace","encodedReq","fetch","method","response","json","results","sources","forEach","result","imgSrc","artworkUrl100","includes","push","ModalContext","createContext","Tag","label","onTagSearch","onTagDelete","className","onClick","Result","onImageSelected","src","width","height","alt","ModalContextProvider","useState","modalOpen","setModalOpen","setInput","gridCallback","setGridCallback","loadingResults","setLoadingResults","setSources","welcomeMessage","setWelcomeMessage","tagObjects","setTagObjects","tagObjectsRef","useRef","current","onImagesReturned","useCallback","submitBtnRef","ctx","openModal","inputCallback","x","Error","pageInView","setPageInView","offset","i","prevPage","nextPage","addTag","map","length","newTag","elem","old","iTunes","filtered","filter","tag","Provider","value","ThemeProvider","theme","icon","faTimes","TextField","fullWidth","placeholder","onChange","e","target","onKeyDown","key","btn","click","obj","CircularProgress","Button","disabled","color","ref","children","GlobalTheme","MuiTextField","primary","deepPurple","secondary","indigo","waitForImagesToLoad","images","promises","image","Promise","resolve","complete","naturalWidth","naturalHeight","onload","allSettled","getCanvas","gridValues","imageSources","numColumns","numRows","JSON","stringify","encodedJson","res","then","downloadImageFromURL","url","link","document","createElement","href","download","body","appendChild","remove","GridContainer","useContext","inputNumColumns","setInputNumColumns","inputNumRows","setInputNumRows","officialNumColumns","setOfficialNumColumns","officialNumRows","setOfficialNumRows","gridIsLoading","setGridIsLoading","downloadInProgress","setDownloadInProgress","officialImages","setOfficialImages","officialImagesRef","onGridInitialized","initialImages","onItemSet","index","newSrc","newImages","defaultValue","window","confirm","alert","gridState","onDownloadButtonDown","img","console","log","Grid","total","cellItems","setCellItems","useEffect","newImg","Image","Math","random","css","documentElement","style","setProperty","toString","setCssProps","newCellItems","newItem","CellItem","initialSource","margin","context","setSrc","onImageReceieved","newSource","App","Modal","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"wTAEaA,EAAaC,YAAe,CACvCC,QAAS,CACPC,KAAM,SAERC,MAAO,CACLC,UAAW,CACTC,QAAS,YACTC,kBAAkB,EAClBC,KAAM,YCRCC,EAAkB,uCAAG,WAAOC,EAAeC,GAAtB,yBAAAC,EAAA,6DAC1BC,EAAeC,mBAAmBJ,GAAOK,QAAQ,OAAQ,KAEzDC,EAAaF,mBAAmB,wCAAD,OACKD,EADL,8BAHL,SAOTI,MAAM,UAAD,OAAWD,GAAc,CACnDE,OAAQ,QARsB,cAO1BC,EAP0B,gBAWbA,EAASC,OAXI,OAW1BA,EAX0B,OAa1BC,EAAUD,EAAKC,QAEfC,EAAoB,GAE1BD,EAAQE,SAAQ,SAACC,GACf,IAAIC,EAAiBD,EAAOE,cAE5BD,EAASA,EAAOV,QAAQ,WAAY,WAE/BO,EAAQK,SAASF,IAASH,EAAQM,KAAKH,MAG9Cd,EAASW,GAzBuB,4CAAH,wDCwBlBO,EAAeC,wBAAoC,MAsLhE,SAASC,EAAI3B,GAIT,IACM4B,EAAoC5B,EAApC4B,MAAOC,EAA6B7B,EAA7B6B,YAAaC,EAAgB9B,EAAhB8B,YAE5B,OACE,uBAAMC,UAAU,MAAhB,UACE,uBAAMA,UAAU,WAAWC,QAAS,kBAAMH,EAAYD,IAAtD,UACGA,EAAO,OAEV,sBAAMI,QAAS,kBAAMF,EAAYF,IAAjC,uBAKN,SAASK,EAAOjC,GACd,OACE,qBAAK+B,UAAU,oBAAf,SACE,qBACEC,QAAS,kBAAMhC,EAAMkC,gBAAgBlC,EAAMmC,MAC3CC,MAAO,IACPC,OAAQ,IACRF,IAAKnC,EAAMmC,IACXG,IAAI,aAMGC,MAnNc,SAACvC,GAAgB,IAAD,EACTwC,oBAAkB,GADT,mBACpCC,EADoC,KACzBC,EADyB,OAEjBF,mBAAiB,IAFA,mBAEpClC,EAFoC,KAE7BqC,EAF6B,OAGHH,mBAA0B,MAHvB,mBAGpCI,EAHoC,KAGtBC,EAHsB,OAICL,oBAAkB,GAJnB,mBAIpCM,EAJoC,KAIpBC,EAJoB,OAKbP,mBAAmB,IALN,mBAKpCtB,EALoC,KAK3B8B,EAL2B,OAMCR,mBAAiB,IANlB,mBAMpCS,EANoC,KAMpBC,EANoB,OAOPV,mBAAuB,IAPhB,mBAOpCW,EAPoC,KAOxBC,EAPwB,KAQrCC,EAAgBC,iBAAOH,GAC7BE,EAAcE,QAAUJ,EAgCxB,IA9BA,IAAMK,EAAmBC,uBAAY,SAACxC,GACpC+B,EAAW/B,GACX8B,GAAkB,KACjB,IAEGW,EAAeJ,iBAAiC,MAEhDK,EAAM,CACVC,UAAW,SAACC,GACVnB,GAAa,GACbG,GAAgB,SAACiB,GAAD,OAAeD,EAAcC,QAI3C5B,EAAkBuB,uBACtB,SAACtB,GACC,IAAIS,EAIF,MAAM,IAAImB,MAAM,2BAHhBnB,EAAaT,GACbO,GAAa,KAKjB,CAACE,IAlCwC,EAqCPJ,mBAAiB,GArCV,mBAqCpCwB,GArCoC,KAqCxBC,GArCwB,KAuCrCC,GADiB,EACRF,GACT/C,GAAyB,GACtBkD,GAAI,EAAGA,GAHO,EAGaA,KAC9BjD,EAAQiD,GAAID,KACdjD,GAAQO,KACN,cAACS,EAAD,CAAQE,IAAKjB,EAAQiD,GAAID,IAAShC,gBAAiBA,KAKzD,IAAMkC,GAAWX,uBAAY,WAC3BQ,GAAcD,GAAa,KAC1B,CAACA,KAEEK,GAAWZ,uBAAY,WAC3BQ,GAAcD,GAAa,KAC1B,CAACA,KAEEM,GAASb,uBAAY,SAACnD,GAG1B,IAFa+C,EAAcE,QAAQgB,KAAI,SAAC/D,GAAD,OAAOA,EAAEoB,SAErCL,SAASjB,MAChB+C,EAAcE,QAAQiB,OAAS,MAC/BlE,EAAMkE,OAAS,IAAnB,CAEA,IAQMC,EAAS,CAAEC,KAPf,cAAC/C,EAAD,CACEC,MAAOtB,EACPuB,YAAa,SAACD,GAAD,OAAmBC,GAAYD,IAC5CE,YAAa,SAACF,GAAD,OAAmBE,GAAYF,MAIhBA,MAAOtB,GACvC8C,GAAc,SAACuB,GAAD,4BAAkBA,GAAlB,CAAuBF,UACpC,IAEG5C,GAAc4B,uBAAY,SAAC7B,GAC/BgD,EAA0BhD,EAAO4B,GACjCS,GAAc,KACb,IAEGnC,GAAc2B,uBAAY,SAAC7B,GAC/B,IAAMiD,EAAyBxB,EAAcE,QAAQuB,QACnD,SAACC,GAAD,OAASnD,IAAUmD,EAAInD,SAEzBwB,EAAcyB,KACb,IAEH,OACE,eAACpD,EAAauD,SAAd,CAAuBC,MAAK,eAAOtB,GAAnC,UACGlB,GACC,cAACyC,EAAA,EAAD,CAAeC,MAAOvF,EAAtB,SACE,qBAAKmC,UAAU,iBAAf,SACE,qBAAKA,UAAU,eAAf,SACE,sBAAKA,UAAU,QAAf,UACE,sBAAKA,UAAU,eAAf,yBAEE,cAAC,IAAD,CACEA,UAAU,eACVC,QAAS,kBAAMU,GAAa,IAC5B0C,KAAMC,SAGV,qBAAKtD,UAAU,kBAEf,qBAAKA,UAAU,mBAAf,SACE,cAACuD,EAAA,EAAD,CACEC,WAAS,EACTC,YAAY,mCACZtF,QAAQ,WACRE,KAAK,QACLqF,SAAU,SAACC,GAAD,OAAO/C,EAAS+C,EAAEC,OAAOV,QACnCW,UAAW,SAACF,GACV,GAAc,UAAVA,EAAEG,IAAiB,CACrB,IAAMC,EAAMpC,EAAaH,QACzB,IAAIuC,EAEG,MAAM,IAAI/B,MAAM,gCADrB+B,EAAIC,cAOd,qBAAKhE,UAAU,iBAAf,SACGoB,EAAWoB,KAAI,SAACyB,GAAD,OAASA,EAAItB,UAG9BxD,EAAQsD,OAAS,EAChB,qBAAKzC,UAAU,aAAf,SAA6Bd,KAC3B6B,EACF,cAACmD,EAAA,EAAD,IAEA,+BAAOhD,IAGT,sBAAKlB,UAAU,yBAAf,UACE,8BACE,cAACmE,EAAA,EAAD,CAAQC,SAAUnC,GAAa,EAAGhC,QAASoC,GAA3C,4BAIF,8BACE,cAAC8B,EAAA,EAAD,CACEC,SAAUlF,GAAQuD,OAzGf,EA0GHxC,QAASqC,GAFX,+BASJ,qBAAKtC,UAAU,kBACf,qBAAKA,UAAU,eAAf,SACE,cAACmE,EAAA,EAAD,CACEhG,QAAQ,YACRkG,MAAM,UACNjG,kBAAkB,EAClBkG,IAAK3C,EACL1B,QAAO,sBAAE,sBAAAxB,EAAA,sDACP8D,GAAOhE,GACP0C,EAAW,IACXE,EAAkB,wBAClBH,GAAkB,GAClB6B,EAA0BtE,EAAOkD,GACjCS,GAAc,GANP,2CALX,+BAsBXjE,EAAMsG,a,iBCxMAC,EAAc1G,YAAe,CACxCG,MAAO,CAELC,UAAW,CACTE,kBAAkB,EAClBC,KAAM,QACNF,QAAS,aAEXsG,aAAc,CACZtG,QAAS,WACTE,KAAM,UAGVN,QAAS,CACP2G,QAASC,IACTC,UAAWC,IACX7G,KAAM,UCnBG8G,EAAmB,uCAAG,WACjCC,GADiC,eAAAtG,EAAA,6DAG3BuG,EAA2B,GACjCD,EAAOvC,IAAP,uCAAW,WAAOyC,GAAP,SAAAxG,EAAA,sDACTuG,EAASvF,KACP,IAAIyF,SAAc,SAACC,GACbF,EAAMG,SACqB,IAAvBH,EAAMI,cACoB,IAAxBJ,EAAMK,eAEVH,IAIJF,EAAMM,OAAS,WACbJ,SAZC,2CAAX,uDAJiC,SAuB3BD,QAAQM,WAAWR,GAvBQ,gCAyB1BD,GAzB0B,2CAAH,sDCAnBU,EAAS,uCAAG,WACvBC,EACAC,GAFuB,uBAAAlH,EAAA,6DAIfmH,EAAwBF,EAAxBE,WAAYC,EAAYH,EAAZG,QAEd5G,EAAO6G,KAAKC,UAAUJ,GACtBK,EAAcrH,mBAAmBM,GAEnCgH,EAAc,GATK,SAWjBnH,MAAM,mBAAD,OAAoB8G,EAApB,YAAkCC,EAAlC,YAA6CG,IACrDE,MAAK,SAACD,GAAD,OAASA,EAAIhH,UAClBiH,MAAK,SAAC7G,GACL4G,EAAM5G,KAda,gCAiBhB4G,GAjBgB,2CAAH,wDCATE,EAAuB,SAACC,GACnC,IAAMC,EAAOC,SAASC,cAAc,KACpCF,EAAKG,KAAOJ,EACZC,EAAKI,SAAW,6BAChBH,SAASI,KAAKC,YAAYN,GAC1BA,EAAKrC,QACLqC,EAAKO,UCSA,SAASC,IAEd,IADYC,qBAAWpH,GACb,MAAM,IAAIsC,MAAM,yBAE1B,IAJ8B,EAOgBvB,mBAHzB,GAJS,mBAOvBsG,EAPuB,KAONC,EAPM,OAQUvG,mBAHnB,GALS,mBAQvBwG,EARuB,KAQTC,EARS,OASsBzG,mBAL/B,GAJS,mBASvB0G,EATuB,KASHC,EATG,OAYgB3G,mBAPzB,GALS,mBAYvB4G,EAZuB,KAYNC,EAZM,OAcY7G,oBAAkB,GAd9B,mBAcvB8G,EAduB,KAcRC,EAdQ,OAesB/G,oBAAkB,GAfxC,mBAevBgH,EAfuB,KAeHC,EAfG,OAiBcjH,mBAA6B,IAjB3C,mBAiBvBkH,EAjBuB,KAiBPC,EAjBO,KAkBxBC,EAAoBtG,mBAC1BsG,EAAkBrG,QAAUmG,EAE5B,IAAMG,EAAoBpG,uBAAY,SAACqG,GACrCH,EAAkB,YAAIG,MACrB,IAEGC,EAAYtG,uBAAY,SAACuG,EAAeC,GAC5C,IAAMtF,EAAMiF,EAAkBrG,QAE9B,IAAIoB,EAMG,MAAM,IAAIZ,MAAM,yBALrB,IAAMmG,EAAS,YAAOvF,GACtBuF,EAAUF,GAAO7H,IAAM8H,EAGvBN,EAAkBO,KAEnB,IAEH,OACE,qCACE,sBAAKnI,UAAU,4BAAf,UACE,sBAAKA,UAAU,yBAAf,UACE,qBAAKA,UAAU,aAAf,SACE,cAACuD,EAAA,EAAD,CACE1D,MAAM,UACNuI,aAxCS,EAyCTjK,QAAQ,WACRuF,SAAU,SAACC,GAAD,OAAOqD,GAAoBrD,EAAEC,OAAOV,YAGlD,qBAAKlD,UAAU,aAAf,SACE,cAACuD,EAAA,EAAD,CACE1D,MAAM,OACNuI,aA/CS,EAgDTjK,QAAQ,WACRuF,SAAU,SAACC,GAAD,OAAOuD,GAAiBvD,EAAEC,OAAOV,eAIjD,8BACE,cAACiB,EAAA,EAAD,CACEC,SAAUmD,GAAiBE,EAC3BpJ,KAAK,QACL4B,QAAS,WACSoI,OAAOC,QACrB,oDAGEvB,EAAkBE,EAAe,KACnCG,EAAsBL,GACtBO,EAAmBL,IAEnBsB,MACE,+DAbR,uBAsBJ,cAAC,EAAD,CACET,kBAAmBA,EACnBpC,WAAY,CACVE,WAAYuB,EACZtB,QAASwB,GAEXmB,UAAW,CAAEjB,gBAAeC,oBAC5BQ,UAAW,SAACC,EAAeC,GAAhB,OAAmCF,EAAUC,EAAOC,MAGjE,uBACA,sBAAKlI,UAAU,qBAAf,UACE,8BACE,cAACmE,EAAA,EAAD,CACEE,MAAM,UACNhG,KAAK,QACL+F,SAAUmD,GAAiBE,EAC3BxH,QAAS,WACPwI,EACEd,EACA,CACE/B,WAAYmB,EACZlB,QAASoB,GAEXS,IAXN,yBAmBF,qBAAK1H,UAAU,4BAAf,SACGyH,GAAsB,cAACvD,EAAA,EAAD,YAOjC,IAAMuE,EAAoB,uCAAG,WAC3B1D,EACAW,EACAgC,GAH2B,iBAAAjJ,EAAA,6DAK3BiJ,GAAsB,GAEhB/B,EAAyBZ,EAAOvC,KAAI,SAACkG,GACzC,OAAOA,EAAItI,OARc,SAWTqF,EAAUC,EAAYC,GAXb,OAWrBS,EAXqB,OAY3BuC,QAAQC,IAAIxC,EAAI3D,QAEhB0D,EAAqBC,GAErBsB,GAAsB,GAhBK,2CAAH,0DAmBpBmB,EAAO,SAAC5K,GAKP,IACGuK,EAAcvK,EAAduK,UADJ,EAE4BvK,EAAMyH,WAA9BE,EAFJ,EAEIA,WAAYC,EAFhB,EAEgBA,QACdiD,EAAQlD,EAAaC,EAHvB,EAK8BpF,mBAAwB,IALtD,mBAKGsI,EALH,KAKcC,EALd,KAsDJ,OA/CAC,qBAAU,WAGRT,EAAUhB,kBAAiB,GAI3B,IADA,IAAMW,EAAgC,GAC7B/F,EAAI,EAAGA,EAAI0G,EAAO1G,IAAK,CAC9B,IAAM8G,EAAS,IAAIC,MACnBD,EAAO9I,IAAP,qCAA2CgJ,KAAKC,SAAhD,SACAlB,EAAU1I,KAAKyJ,ICjLM,SAACxD,GAI1B,IAAM4D,EAAMhD,SAASiD,gBAAgBC,MAC7B5D,EAAwBF,EAAxBE,WAAYC,EAAYH,EAAZG,QACpByD,EAAIG,YAAY,gBAAiB7D,EAAW8D,YAC5CJ,EAAIG,YAAY,aAAc5D,EAAQ6D,YD8KpCC,CAAY,CAAE/D,WAAYA,EAAYC,QAASA,IAG/Cf,EAAoBqD,GAAWjC,MAAK,WAGlC,IAAM0D,EAA8B,GAChCxH,GAAa,EAEjB+F,EAAU/I,SAAQ,SAAC6F,GACjB7C,IAEA,IAAMyH,EACJ,cAACC,EAAD,CACEC,cAAe9E,EAAM7E,IACrB6H,MAAO7F,EACP4F,UAAW,SAACC,EAAeC,GAAhB,OACTjK,EAAM+J,UAAUC,EAAOC,MAK7B0B,EAAanK,KAAKoK,MAGpBb,EAAaY,GAGb3L,EAAM6J,kBAAkBK,GACxBK,EAAUhB,kBAAiB,QAE5B,CAAC5B,EAAYC,IAET2C,EAAUjB,cACf,cAACrD,EAAA,EAAD,CAAkBG,MAAM,YAAYmF,MAAO,CAAEQ,OAAQ,OAErD,qBAAKhK,UAAU,OAAf,SAAuB+I,KAI3B,SAASe,EAAS7L,GAKhB,IAAMgM,EAAUnD,qBAAWpH,GAD1B,EAGqBe,mBAAiBxC,EAAM8L,eAH5C,mBAGM3J,EAHN,KAGW8J,EAHX,KAKKC,EAAmBzI,uBAAY,SAAC0I,GACpCF,EAAOE,GACPnM,EAAM+J,UAAU/J,EAAMgK,MAAOmC,KAC5B,IAEH,OACE,qBACEpK,UAAU,YACVI,IAAKA,EACLG,IAAI,cACJN,QAAS,WACHgK,GACFA,EAAQpI,WAAU,kBAAMsI,QE7NnBE,MAbf,WACE,OACE,qBAAKrK,UAAU,MAAf,SACE,cAACmD,EAAA,EAAD,CAAeC,MAAOoB,EAAtB,SACE,eAAC8F,EAAD,WACE,2FACA,cAACzD,EAAD,YCAK0D,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBvE,MAAK,YAAkD,IAA/CwE,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCHdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEF3E,SAAS4E,eAAe,SAM1BX,M","file":"static/js/main.60874ba7.chunk.js","sourcesContent":["import { createMuiTheme } from \"@material-ui/core\";\r\n\r\nexport const ModalTheme = createMuiTheme({\r\n  palette: {\r\n    type: \"light\",\r\n  },\r\n  props: {\r\n    MuiButton: {\r\n      variant: \"contained\",\r\n      disableElevation: true,\r\n      size: \"large\",\r\n    },\r\n  },\r\n});\r\n","import { error } from \"console\";\r\n\r\nexport const getImagesFromInput = async (input: string, callback: Function) => {\r\n  const encodedInput = encodeURIComponent(input).replace(/%20/g, \"+\");\r\n\r\n  const encodedReq = encodeURIComponent(\r\n    `https://itunes.apple.com/search?term=${encodedInput}&entity=album&media=music`\r\n  );\r\n\r\n  const response = await fetch(`/proxy/${encodedReq}`, {\r\n    method: \"GET\",\r\n  });\r\n\r\n  const json = await response.json();\r\n\r\n  const results = json.results;\r\n\r\n  const sources: string[] = [];\r\n\r\n  results.forEach((result: any) => {\r\n    let imgSrc: string = result.artworkUrl100;\r\n\r\n    imgSrc = imgSrc.replace(/100x100/g, \"200x200\");\r\n\r\n    if (!sources.includes(imgSrc)) sources.push(imgSrc);\r\n  });\r\n\r\n  callback(sources);\r\n};\r\n","import React, {\r\n  createContext,\r\n  useCallback,\r\n  useRef,\r\n  useState,\r\n} from \"react\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faTimes } from \"@fortawesome/free-solid-svg-icons\";\r\nimport {\r\n  Button,\r\n  CircularProgress,\r\n  TextField,\r\n  ThemeProvider,\r\n} from \"@material-ui/core\";\r\nimport { ModalTheme } from \"../themes/modal\";\r\nimport * as iTunes from \"../functions/itunes\";\r\n\r\ninterface IModalContext {\r\n  openModal: Function;\r\n}\r\n\r\ninterface ITagObject {\r\n  elem: JSX.Element;\r\n  label: string;\r\n}\r\n\r\nexport const ModalContext = createContext<IModalContext | null>(null);\r\n\r\nconst ModalContextProvider = (props: any) => {\r\n  const [modalOpen, setModalOpen] = useState<boolean>(false);\r\n  const [input, setInput] = useState<string>(\"\");\r\n  const [gridCallback, setGridCallback] = useState<Function | null>(null);\r\n  const [loadingResults, setLoadingResults] = useState<boolean>(false);\r\n  const [sources, setSources] = useState<string[]>([]);\r\n  const [welcomeMessage, setWelcomeMessage] = useState<string>(\"\");\r\n  const [tagObjects, setTagObjects] = useState<ITagObject[]>([]);\r\n  const tagObjectsRef = useRef(tagObjects);\r\n  tagObjectsRef.current = tagObjects;\r\n\r\n  const onImagesReturned = useCallback((results: string[]) => {\r\n    setSources(results);\r\n    setLoadingResults(false);\r\n  }, []);\r\n\r\n  const submitBtnRef = useRef<HTMLButtonElement | null>(null);\r\n\r\n  const ctx = {\r\n    openModal: (inputCallback: Function) => {\r\n      setModalOpen(true);\r\n      setGridCallback((x: string) => inputCallback(x));\r\n    },\r\n  };\r\n\r\n  const onImageSelected = useCallback(\r\n    (src: string) => {\r\n      if (gridCallback) {\r\n        gridCallback(src);\r\n        setModalOpen(false);\r\n      } else {\r\n        throw new Error(\"Callback doesn't exist!\");\r\n      }\r\n    },\r\n    [gridCallback]\r\n  );\r\n\r\n  const [pageInView, setPageInView] = useState<number>(0);\r\n  const resultsPerPage = 6;\r\n  const offset = pageInView * resultsPerPage;\r\n  const results: JSX.Element[] = [];\r\n  for (let i = 0; i < resultsPerPage; i++) {\r\n    if (sources[i + offset]) {\r\n      results.push(\r\n        <Result src={sources[i + offset]} onImageSelected={onImageSelected} />\r\n      );\r\n    }\r\n  }\r\n\r\n  const prevPage = useCallback(() => {\r\n    setPageInView(pageInView - 1);\r\n  }, [pageInView]);\r\n\r\n  const nextPage = useCallback(() => {\r\n    setPageInView(pageInView + 1);\r\n  }, [pageInView]);\r\n\r\n  const addTag = useCallback((input: string) => {\r\n    let labels = tagObjectsRef.current.map((a) => a.label);\r\n\r\n    if (labels.includes(input)) return;\r\n    if (tagObjectsRef.current.length > 4) return;\r\n    if (input.length > 30) return;\r\n\r\n    const newElem = (\r\n      <Tag\r\n        label={input}\r\n        onTagSearch={(label: string) => onTagSearch(label)}\r\n        onTagDelete={(label: string) => onTagDelete(label)}\r\n      />\r\n    );\r\n\r\n    const newTag = { elem: newElem, label: input };\r\n    setTagObjects((old: any) => [...old, newTag]);\r\n  }, []);\r\n\r\n  const onTagSearch = useCallback((label: string) => {\r\n    iTunes.getImagesFromInput(label, onImagesReturned);\r\n    setPageInView(0);\r\n  }, []);\r\n\r\n  const onTagDelete = useCallback((label: string) => {\r\n    const filtered: ITagObject[] = tagObjectsRef.current.filter(\r\n      (tag) => label !== tag.label\r\n    );\r\n    setTagObjects(filtered);\r\n  }, []);\r\n\r\n  return (\r\n    <ModalContext.Provider value={{ ...ctx }}>\r\n      {modalOpen && (\r\n        <ThemeProvider theme={ModalTheme}>\r\n          <div className=\"modal-backdrop\">\r\n            <div className=\"modal-holder\">\r\n              <div className=\"modal\">\r\n                <div className=\"modal-header\">\r\n                  Add an album\r\n                  <FontAwesomeIcon\r\n                    className=\"modal-ex-btn\"\r\n                    onClick={() => setModalOpen(false)}\r\n                    icon={faTimes}\r\n                  />\r\n                </div>\r\n                <div className=\"modal-divider\" />\r\n\r\n                <div className=\"modal-search-bar\">\r\n                  <TextField\r\n                    fullWidth\r\n                    placeholder=\"Search for an artist or album...\"\r\n                    variant=\"outlined\"\r\n                    size=\"small\"\r\n                    onChange={(e) => setInput(e.target.value)}\r\n                    onKeyDown={(e) => {\r\n                      if (e.key === \"Enter\") {\r\n                        const btn = submitBtnRef.current;\r\n                        if (btn) {\r\n                          btn.click();\r\n                        } else throw new Error(\"Submit button doesn't exist!\");\r\n                      }\r\n                    }}\r\n                  />\r\n                </div>\r\n\r\n                <div className=\"tags-container\">\r\n                  {tagObjects.map((obj) => obj.elem)}\r\n                </div>\r\n\r\n                {sources.length > 0 ? (\r\n                  <div className=\"modal-grid\">{results}</div>\r\n                ) : loadingResults ? (\r\n                  <CircularProgress />\r\n                ) : (\r\n                  <span>{welcomeMessage}</span>\r\n                )}\r\n\r\n                <div className=\"modal-button-container\">\r\n                  <div>\r\n                    <Button disabled={pageInView < 1} onClick={prevPage}>\r\n                      👈\r\n                    </Button>\r\n                  </div>\r\n                  <div>\r\n                    <Button\r\n                      disabled={results.length < resultsPerPage}\r\n                      onClick={nextPage}\r\n                    >\r\n                      👉\r\n                    </Button>\r\n                  </div>\r\n                </div>\r\n\r\n                <div className=\"modal-divider\" />\r\n                <div className=\"modal-footer\">\r\n                  <Button\r\n                    variant=\"contained\"\r\n                    color=\"primary\"\r\n                    disableElevation={true}\r\n                    ref={submitBtnRef}\r\n                    onClick={async () => {\r\n                      addTag(input);\r\n                      setSources([]);\r\n                      setWelcomeMessage(\"Hm, nothing found :(\");\r\n                      setLoadingResults(true);\r\n                      iTunes.getImagesFromInput(input, onImagesReturned);\r\n                      setPageInView(0);\r\n                    }}\r\n                  >\r\n                    Search\r\n                  </Button>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </ThemeProvider>\r\n      )}\r\n      {props.children}\r\n    </ModalContext.Provider>\r\n  );\r\n};\r\n\r\nfunction Tag(props: {\r\n  label: string;\r\n  onTagSearch: Function;\r\n  onTagDelete: Function;\r\n}) {\r\n  const { label, onTagSearch, onTagDelete } = props;\r\n\r\n  return (\r\n    <span className=\"tag\">\r\n      <span className=\"tag-text\" onClick={() => onTagSearch(label)}>\r\n        {label}{\" \"}\r\n      </span>\r\n      <span onClick={() => onTagDelete(label)}>❌</span>\r\n    </span>\r\n  );\r\n}\r\n\r\nfunction Result(props: { src: string; onImageSelected: Function }) {\r\n  return (\r\n    <div className=\"modal-grid-result\">\r\n      <img\r\n        onClick={() => props.onImageSelected(props.src)}\r\n        width={200}\r\n        height={200}\r\n        src={props.src}\r\n        alt=\"result\"\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ModalContextProvider;\r\n","import { createMuiTheme } from \"@material-ui/core\";\r\nimport { indigo, deepPurple } from \"@material-ui/core/colors\";\r\n\r\nexport const GlobalTheme = createMuiTheme({\r\n  props: {\r\n    // Name of the component ⚛️\r\n    MuiButton: {\r\n      disableElevation: true,\r\n      size: \"small\",\r\n      variant: \"contained\",\r\n    },\r\n    MuiTextField: {\r\n      variant: \"outlined\",\r\n      size: \"small\",\r\n    },\r\n  },\r\n  palette: {\r\n    primary: deepPurple,\r\n    secondary: indigo,\r\n    type: \"dark\",\r\n  },\r\n});\r\n","export const waitForImagesToLoad = async (\r\n  images: HTMLImageElement[]\r\n): Promise<HTMLImageElement[]> => {\r\n  const promises: Promise<any>[] = [];\r\n  images.map(async (image: HTMLImageElement) => {\r\n    promises.push(\r\n      new Promise<void>((resolve) => {\r\n        if (image.complete) {\r\n          if (!(image.naturalWidth === 0)) {\r\n            if (!(image.naturalHeight === 0)) {\r\n              //image completely loaded\r\n              resolve();\r\n            }\r\n          }\r\n        } else {\r\n          image.onload = () => {\r\n            resolve();\r\n          };\r\n        }\r\n      })\r\n    );\r\n  });\r\n\r\n  await Promise.allSettled(promises);\r\n\r\n  return images;\r\n};\r\n","export const getCanvas = async (\r\n  gridValues: { numColumns: number; numRows: number },\r\n  imageSources: string[]\r\n): Promise<string> => {\r\n  const { numColumns, numRows } = gridValues;\r\n\r\n  const json = JSON.stringify(imageSources);\r\n  const encodedJson = encodeURIComponent(json);\r\n\r\n  let res: string = \"\";\r\n\r\n  await fetch(`/generateCanvas/${numColumns}/${numRows}/${encodedJson}`)\r\n    .then((res) => res.json())\r\n    .then((result) => {\r\n      res = result;\r\n    });\r\n\r\n  return res;\r\n};\r\n","export const downloadImageFromURL = (url: string) => {\r\n  const link = document.createElement(\"a\");\r\n  link.href = url;\r\n  link.download = \"album-collage-designer.png\";\r\n  document.body.appendChild(link);\r\n  link.click();\r\n  link.remove();\r\n};\r\n","import React, {\r\n  useCallback,\r\n  useContext,\r\n  useEffect,\r\n  useRef,\r\n  useState,\r\n} from \"react\";\r\nimport { ModalContext } from \"../contexts/Modal\";\r\nimport { Button, CircularProgress, TextField } from \"@material-ui/core\";\r\n\r\nimport { setCssProps } from \"../functions/setCssProps\";\r\nimport { waitForImagesToLoad } from \"../functions/waitForImages\";\r\nimport { getCanvas } from \"../functions/getCanvas\";\r\nimport { downloadImageFromURL } from \"../functions/downloader\";\r\n\r\nexport function GridContainer() {\r\n  const ctx = useContext(ModalContext);\r\n  if (!ctx) throw new Error(\"Context not received!\");\r\n\r\n  const _defaultCols = 4;\r\n  const _defaultRows = 8;\r\n\r\n  const [inputNumColumns, setInputNumColumns] = useState<number>(_defaultCols);\r\n  const [inputNumRows, setInputNumRows] = useState<number>(_defaultRows);\r\n  const [officialNumColumns, setOfficialNumColumns] = useState<number>(\r\n    _defaultCols\r\n  );\r\n  const [officialNumRows, setOfficialNumRows] = useState<number>(_defaultRows);\r\n\r\n  const [gridIsLoading, setGridIsLoading] = useState<boolean>(false);\r\n  const [downloadInProgress, setDownloadInProgress] = useState<boolean>(false);\r\n\r\n  const [officialImages, setOfficialImages] = useState<HTMLImageElement[]>([]);\r\n  const officialImagesRef = useRef<HTMLImageElement[]>();\r\n  officialImagesRef.current = officialImages;\r\n\r\n  const onGridInitialized = useCallback((initialImages: HTMLImageElement[]) => {\r\n    setOfficialImages([...initialImages]);\r\n  }, []);\r\n\r\n  const onItemSet = useCallback((index: number, newSrc: string) => {\r\n    const old = officialImagesRef.current;\r\n\r\n    if (old) {\r\n      const newImages = [...old];\r\n      newImages[index].src = newSrc;\r\n\r\n      //set the official image\r\n      setOfficialImages(newImages);\r\n    } else throw new Error(\"Ref was not assigned!\");\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      <div className=\"grid-text-field-container\">\r\n        <div className=\"input-fields-container\">\r\n          <div className=\"text-field\">\r\n            <TextField\r\n              label=\"Columns\"\r\n              defaultValue={_defaultCols}\r\n              variant=\"outlined\"\r\n              onChange={(e) => setInputNumColumns(+e.target.value)}\r\n            />\r\n          </div>\r\n          <div className=\"text-field\">\r\n            <TextField\r\n              label=\"Rows\"\r\n              defaultValue={_defaultRows}\r\n              variant=\"outlined\"\r\n              onChange={(e) => setInputNumRows(+e.target.value)}\r\n            />\r\n          </div>\r\n        </div>\r\n        <div>\r\n          <Button\r\n            disabled={gridIsLoading || downloadInProgress}\r\n            size=\"large\"\r\n            onClick={() => {\r\n              const allowed = window.confirm(\r\n                \"This will reset your current images! Continue?\"\r\n              );\r\n              if (!allowed) return;\r\n              if (inputNumColumns * inputNumRows < 500) {\r\n                setOfficialNumColumns(inputNumColumns);\r\n                setOfficialNumRows(inputNumRows);\r\n              } else\r\n                alert(\r\n                  \"Slow your roll Picasso! We can't go over 500 total cells!\"\r\n                );\r\n            }}\r\n          >\r\n            Set!\r\n          </Button>\r\n        </div>\r\n      </div>\r\n\r\n      <Grid\r\n        onGridInitialized={onGridInitialized}\r\n        gridValues={{\r\n          numColumns: officialNumColumns,\r\n          numRows: officialNumRows,\r\n        }}\r\n        gridState={{ gridIsLoading, setGridIsLoading }}\r\n        onItemSet={(index: number, newSrc: string) => onItemSet(index, newSrc)}\r\n      />\r\n\r\n      <br />\r\n      <div className=\"download-container\">\r\n        <div>\r\n          <Button\r\n            color=\"primary\"\r\n            size=\"large\"\r\n            disabled={gridIsLoading || downloadInProgress}\r\n            onClick={() => {\r\n              onDownloadButtonDown(\r\n                officialImages,\r\n                {\r\n                  numColumns: inputNumColumns,\r\n                  numRows: inputNumRows,\r\n                },\r\n                setDownloadInProgress\r\n              );\r\n            }}\r\n          >\r\n            Download!\r\n          </Button>\r\n        </div>\r\n\r\n        <div className=\"download-progress-spinner\">\r\n          {downloadInProgress && <CircularProgress />}\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nconst onDownloadButtonDown = async (\r\n  images: HTMLImageElement[],\r\n  gridValues: { numColumns: number; numRows: number },\r\n  setDownloadInProgress: Function\r\n) => {\r\n  setDownloadInProgress(true);\r\n\r\n  const imageSources: string[] = images.map((img) => {\r\n    return img.src;\r\n  });\r\n\r\n  const url = await getCanvas(gridValues, imageSources);\r\n  console.log(url.length);\r\n\r\n  downloadImageFromURL(url);\r\n\r\n  setDownloadInProgress(false);\r\n};\r\n\r\nconst Grid = (props: {\r\n  gridValues: { numColumns: number; numRows: number };\r\n  gridState: { gridIsLoading: any; setGridIsLoading: Function };\r\n  onGridInitialized: Function;\r\n  onItemSet: Function;\r\n}) => {\r\n  const { gridState } = props;\r\n  const { numColumns, numRows } = props.gridValues;\r\n  const total = numColumns * numRows;\r\n\r\n  const [cellItems, setCellItems] = useState<JSX.Element[]>([]);\r\n\r\n  useEffect(() => {\r\n    //initialize grid; generate and assign CellItems\r\n\r\n    gridState.setGridIsLoading(true);\r\n\r\n    //generate new array of images\r\n    const newImages: HTMLImageElement[] = [];\r\n    for (let i = 0; i < total; i++) {\r\n      const newImg = new Image();\r\n      newImg.src = `https://picsum.photos/seed/${Math.random()}/1000`;\r\n      newImages.push(newImg);\r\n    }\r\n\r\n    //init css\r\n    setCssProps({ numColumns: numColumns, numRows: numRows });\r\n\r\n    //wait for image array to load\r\n    waitForImagesToLoad(newImages).then(() => {\r\n      //generate new array of cellitems\r\n\r\n      const newCellItems: JSX.Element[] = [];\r\n      let i: number = -1;\r\n\r\n      newImages.forEach((image) => {\r\n        i++;\r\n\r\n        const newItem = (\r\n          <CellItem\r\n            initialSource={image.src}\r\n            index={i}\r\n            onItemSet={(index: number, newSrc: string) =>\r\n              props.onItemSet(index, newSrc)\r\n            }\r\n          />\r\n        );\r\n\r\n        newCellItems.push(newItem);\r\n      });\r\n\r\n      setCellItems(newCellItems);\r\n\r\n      //finally, set grid state to not loading\r\n      props.onGridInitialized(newImages);\r\n      gridState.setGridIsLoading(false);\r\n    });\r\n  }, [numColumns, numRows]);\r\n\r\n  return gridState.gridIsLoading ? (\r\n    <CircularProgress color=\"secondary\" style={{ margin: 100 }} />\r\n  ) : (\r\n    <div className=\"grid\">{cellItems}</div>\r\n  );\r\n};\r\n\r\nfunction CellItem(props: {\r\n  initialSource: string;\r\n  index: number;\r\n  onItemSet: Function;\r\n}) {\r\n  const context = useContext(ModalContext);\r\n\r\n  const [src, setSrc] = useState<string>(props.initialSource);\r\n\r\n  const onImageReceieved = useCallback((newSource: string) => {\r\n    setSrc(newSource);\r\n    props.onItemSet(props.index, newSource);\r\n  }, []);\r\n\r\n  return (\r\n    <img\r\n      className=\"cell-item\"\r\n      src={src}\r\n      alt=\"album cover\"\r\n      onClick={() => {\r\n        if (context) {\r\n          context.openModal(() => onImageReceieved);\r\n        }\r\n      }}\r\n    ></img>\r\n  );\r\n}\r\n","export const setCssProps = (gridValues: {\r\n  numColumns: number;\r\n  numRows: number;\r\n}) => {\r\n  const css = document.documentElement.style;\r\n  const { numColumns, numRows } = gridValues;\r\n  css.setProperty(\"--num-columns\", numColumns.toString());\r\n  css.setProperty(\"--num-rows\", numRows.toString());\r\n};\r\n","import React from \"react\";\nimport \"./App.css\";\nimport ModalContextProvider from \"./contexts/Modal\";\nimport { ThemeProvider } from \"@material-ui/core\";\nimport { GlobalTheme } from \"./themes/global\";\nimport { GridContainer } from \"./components/GridContainer\";\n//import { GridContainer } from \"./components/GridContainer\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <ThemeProvider theme={GlobalTheme}>\n        <ModalContextProvider>\n          <header>🎨 Album Collage Designer🖌️</header>\n          <GridContainer />\n        </ModalContextProvider>\n      </ThemeProvider>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);  \n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n}\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}